{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"rxjs\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"lodash\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./types.ts","webpack:///./datasource.ts","webpack:///./ConfigEditor.tsx","webpack:///./QueryEditor.tsx","webpack:///./VariableQueryEditor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport interface MongoDBQuery extends DataQuery {\n  database: string;\n  collection: string;\n  timestampField: string;\n  timestampFormat: string;\n  labelFields: string[];\n  valueFields: string[];\n  valueFieldTypes: string[];\n  aggregation: string;\n  autoTimeBound: boolean;\n  autoTimeSort: boolean;\n}\n\nexport enum MongoDBQueryType {\n    Timeseries = \"Timeseries\",\n    Table = \"Table\",\n};\n\nexport const defaultQuery: Partial<MongoDBQuery> = {\n    database: \"my_db\",\n    collection: \"my_collection\",\n    queryType: MongoDBQueryType.Timeseries,\n    timestampField: \"timestamp\",\n    timestampFormat: \"\",\n    labelFields: [ \"sensorID\" ],\n    valueFields: [ \"measurement\" ],\n    valueFieldTypes: [ \"float64\" ],\n    aggregation: JSON.stringify([\n        { \n            \"$project\": { \n                \"timestamp\": 1, \n                \"sensorID\": \"$metadata.sensorID\",\n                \"measurement\": 1, \n                \"_id\": 0 \n            }\n        }\n    ]),\n    autoTimeBound: false,\n    autoTimeSort: false\n};\n\nexport interface MongoDBVariableQuery {\n    database: string;\n    collection: string;\n    aggregation: string;\n    fieldName: string;\n    fieldType: string;\n};\n\n/**\n * These are options configured for each DataSource instance.\n */\nexport interface MongoDBDataSourceOptions extends DataSourceJsonData {\n  url?: string;\n  tls?: boolean;\n  tlsInsecure?: boolean;\n  tlsCertificate?: string;\n  tlsCa?: string;\n  tlsServerName?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MongoDBSecureJsonData {\n    username?: string;\n    password?: string;\n    tlsCertificateKey?: string;\n}\n","import { lastValueFrom, Observable } from 'rxjs';\nimport { \n    DataSourceInstanceSettings,\n    DataQueryRequest, \n    DataQueryResponse, \n    MetricFindValue,\n    ScopedVars\n} from '@grafana/data';\nimport {\n    DataSourceWithBackend, \n    getTemplateSrv,\n    frameToMetricFindValue\n} from '@grafana/runtime';\nimport { MongoDBDataSourceOptions, MongoDBQuery, MongoDBQueryType, MongoDBVariableQuery } from './types';\n\nexport class DataSource extends DataSourceWithBackend<MongoDBQuery, MongoDBDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MongoDBDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n applyTemplateVariables(query: MongoDBQuery, scopedVars: ScopedVars): Record<string, any> {\n    const templateSrv = getTemplateSrv();\n    return {\n      ...query,\n      aggregation: query.aggregation ? templateSrv.replace(query.aggregation, scopedVars, 'json') : ''\n    };\n  }\n\n\n  query(request: DataQueryRequest<MongoDBQuery>): Observable<DataQueryResponse> {\n      const templateSrv = getTemplateSrv();\n      templateSrv.updateTimeRange(request.range);\n      return super.query(request);\n  }\n\n  async metricFindQuery(query: MongoDBVariableQuery, options?: any): Promise<MetricFindValue[]> {\n    const target: Partial<MongoDBQuery> = {\n        refId: 'metricFindQuery',\n        database: query.database,\n        collection: query.collection,\n        queryType: MongoDBQueryType.Table,\n        timestampField: \"\",\n        timestampFormat: \"\",\n        labelFields: [],\n        valueFields: [ query.fieldName ],\n        valueFieldTypes: [ query.fieldType ],\n        aggregation: query.aggregation,\n        autoTimeBound: false,\n        autoTimeSort: false\n    }\n\n    let dataQuery = {\n        ...options,\n        targets: [target]\n    }\n    let dataQueryRequest = dataQuery as DataQueryRequest<MongoDBQuery>\n\n    return lastValueFrom(\n        this.query(dataQueryRequest)\n    ).then((rsp) => {\n        if (rsp.error) {\n            throw new Error(rsp.error.message);\n        }\n        if (rsp.data?.length) {\n          return frameToMetricFindValue(rsp.data[0]);\n        }\n        return [];\n    });\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { LegacyForms, TextArea, Field, Switch } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MongoDBDataSourceOptions, MongoDBSecureJsonData } from './types';\n\nconst { SecretFormField, FormField } = LegacyForms;\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MongoDBDataSourceOptions> {}\n\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  onURLChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      url: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSCAChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsCa: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSCertificateChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsCertificate: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tls: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSServerNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsServerName: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const secureJsonData = {\n      ...options.secureJsonData,\n      username: event.target.value,\n    };\n    onOptionsChange({ ...options, secureJsonData });\n  };\n  onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const secureJsonData = {\n      ...options.secureJsonData,\n      password: event.target.value,\n    };\n    onOptionsChange({ ...options, secureJsonData });\n  };\n  onTLSInsecureChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsInsecure: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSCertificateKeyChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const secureJsonData = {\n      ...options.secureJsonData,\n      tlsCertificateKey: event.target.value,\n    };\n    onOptionsChange({ ...options, secureJsonData });\n  };\n\n\n\n  onResetCredential = () => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        username: false,\n        password: false,\n        tlsCertificateKey: false,\n      },\n    });\n  };\n\n  render() {\n    const { options } = this.props;\n    const { jsonData, secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as MongoDBSecureJsonData;\n\n    return (\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <FormField\n            label=\"URL\"\n            labelWidth={6}\n            inputWidth={40}\n            onChange={this.onURLChange}\n            value={jsonData.url || ''}\n            placeholder=\"mongodb[+svc]://hostname:port[,hostname:port][/?key=value]\"\n          />\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.username) as boolean}\n              value={secureJsonData.username || ''}\n              label=\"Username\"\n              placeholder=\"Username\"\n              labelWidth={6}\n              inputWidth={20}\n              onReset={this.onResetCredential}\n              onChange={this.onUsernameChange}\n            />\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              placeholder=\"Password\"\n              labelWidth={6}\n              inputWidth={20}\n              onReset={this.onResetCredential}\n              onChange={this.onPasswordChange}\n            />\n\n          </div>\n        </div>\n        <Field label=\"TLS Enabled\">\n            <Switch\n              value={jsonData.tls || false}\n              onChange={this.onTLSChange}\n            />\n        </Field>\n        { jsonData.tls ?\n            <div>\n            <Field label=\"Insecure (Skip Verification)\">\n                <Switch\n                  value={jsonData.tlsInsecure || false}\n                  onChange={this.onTLSInsecureChange}\n                />\n            </Field>\n            { !jsonData.tlsInsecure ?\n              <> \n              <Field label=\"TLS Certificate Authority\">\n                <TextArea\n                  value={jsonData.tlsCa || ''}\n                  placeholder={\"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"}\n                  onChange={this.onTLSCAChange}\n                  cols={100}\n                />\n              </Field>\n              <FormField\n                label=\"Expected Server Name\"\n                labelWidth={16}\n                inputWidth={40}\n                onChange={this.onTLSServerNameChange}\n                value={jsonData.tlsServerName || ''}\n                placeholder=\"some.other.hostname\"\n                tooltip=\"If your server's certificates are for a different hostname than you use to connect, specify that different hostname here\"\n              />\n              <br/>\n              </>\n              : null\n            }\n              <Field label=\"TLS Certificate\">\n                <TextArea\n                  value={jsonData.tlsCertificate || ''}\n                  placeholder={\"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"}\n                  onChange={this.onTLSCertificateChange}\n                  cols={100}\n                />\n              </Field>\n              <br/>\n              <Field label=\"TLS Certificate Key\">\n                <TextArea\n                  value={secureJsonData.tlsCertificateKey || ''}\n                  placeholder={secureJsonFields.tlsCertificateKey ? \"-----BEGIN RSA PRIVATE KEY-----\\n(This field has been set and is hidden)\\n-----END RSA PRIVATE KEY-----\" : \"-----BEGIN RSA PRIVATE KEY-----\\n(This field has not been set)\\n-----END RSA PRIVATE KEY-----\"}\n                  onChange={this.onTLSCertificateKeyChange}\n                  cols={100}\n                />\n              </Field>\n\n          </div>\n        : null\n      }\n      </div>\n    );\n  }\n}\n","import { defaults } from 'lodash';\n\nimport React, { ChangeEvent, PureComponent, SyntheticEvent } from 'react';\nimport { LegacyForms, Tooltip, InlineFormLabel, Icon } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { defaultQuery, MongoDBDataSourceOptions, MongoDBQuery, MongoDBQueryType } from './types';\nconst { FormField, Input, Switch, Select } = LegacyForms;\n\n\ntype Props = QueryEditorProps<DataSource, MongoDBQuery, MongoDBDataSourceOptions>;\n\nexport class QueryEditor extends PureComponent<Props> {\n  readonly labelWidth = 12;\n\n  readonly queryTypeOptions = [\n    {\n        label: \"Timeseries\",\n        value: MongoDBQueryType.Timeseries,\n        description: \"Return time-indexed series of values, distinguished by a set of labels\"\n    },\n    {\n        label: \"Table\",\n        value: MongoDBQueryType.Table,\n        description: \"Return arbitrary rows for a table or further processing\"\n    }\n  ];\n\n  readonly defaultQueryType: MongoDBQueryType = MongoDBQueryType.Timeseries;\n\n  onDatabaseChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, database: event.target.value });\n  };\n\n  onCollectionChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, collection: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n  onQueryTypeChange = (\n        query: Props['query'],\n        onChange: Props['onChange'],\n        onRunQuery: Props['onRunQuery'],\n  ) => (newValue: SelectableValue) => {\n    onChange({ ...query, queryType: newValue.value });\n    onRunQuery();\n  };\n\n  onTimestampFieldChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, timestampField: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n\n  onTimestampFormatChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, timestampFormat: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n\n  onLabelFieldsChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, labelFields: event.target.value.split(\",\") });\n    // executes the query\n    onRunQuery();\n  };\n\n  onValueFieldsChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, valueFields: event.target.value.split(\",\") });\n    // executes the query\n    onRunQuery();\n  };\n\n  onValueFieldTypesChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, valueFieldTypes: event.target.value.split(\",\") });\n    // executes the query\n    onRunQuery();\n  };\n\n\n  onAggregationChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, aggregation: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n\n\n  onAutoTimeBoundChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, autoTimeBound: event.currentTarget.checked });\n    // executes the query\n    onRunQuery();\n  };\n  onAutoTimeSortChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, autoTimeSort: event.currentTarget.checked });\n    // executes the query\n    onRunQuery();\n  };\n\n\n  render() {\n    const query = defaults(this.props.query, defaultQuery);\n    const { onChange, onRunQuery } = this.props;\n\n    return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={this.labelWidth}\n          value={query.database || ''}\n          onChange={this.onDatabaseChange}\n          label=\"Database\"\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={this.labelWidth}\n          value={query.collection || ''}\n          onChange={this.onCollectionChange}\n          label=\"Collection\"\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel\n                width={this.labelWidth}\n                tooltip=\"Type of query to execute\">\n        QueryType\n        </InlineFormLabel>\n        <Select\n            options={this.queryTypeOptions}\n            value={this.queryTypeOptions.find((queryType) => queryType.value === query.queryType) ?? this.queryTypeOptions[0]}\n            onChange={this.onQueryTypeChange(query, onChange, onRunQuery)}\n        />\n      </div>\n\n      { (query.queryType || this.defaultQueryType) === MongoDBQueryType.Timeseries ? (\n        <div>\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={this.labelWidth}\n              value={query.timestampField || ''}\n              onChange={this.onTimestampFieldChange}\n              label=\"Timestamp Field\"\n              tooltip=\"Field to expect in every document containing the timestamp\"\n            />\n          </div>\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={this.labelWidth}\n              value={query.timestampFormat || ''}\n              onChange={this.onTimestampFormatChange}\n              label=\"Timestamp Format\"\n              tooltip=\"If blank, assume timestamps are native BSON timestamps. Otherwise, parse the timestamp as a string in the format described here: https://pkg.go.dev/time#Parse\"\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={this.labelWidth}\n              value={(query.labelFields || []).join(\",\")}\n              onChange={this.onLabelFieldsChange}\n              label=\"Label Fields\"\n              tooltip=\"Comma separated list of fields containg labels to distinguish different series. Nested fields are not supported, please project to a flat document\"\n            />\n          </div>\n        </div>\n      ) : false }\n\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={this.labelWidth}\n          value={(query.valueFields || []).join(\",\")}\n          onChange={this.onValueFieldsChange}\n          label=\"Value Fields\"\n          tooltip=\"Comma separated list of fields containing measurements or other recorded values. Nested fields are not supported, please project to a flat document\"\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={this.labelWidth}\n          value={(query.valueFieldTypes || []).join(\",\")}\n          onChange={this.onValueFieldTypesChange}\n          label=\"Value Field Types\"\n          tooltip=\"Comma separated list of the data types (float64, uint64, string, etc) of the values listed in the Value Fields. Prefix with a star if a field may not appear in every document for a given series.\"\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineFormLabel\n                width={this.labelWidth}\n                tooltip=\"Argument to db.collection.aggregate(...), a JSON array of pipeline stage objects. Helper functions like new Date() or ObjectId() are not supported\"\n        >\n        Aggregation\n        </InlineFormLabel>\n        <Input\n          value={query.aggregation || ''}\n          onChange={this.onAggregationChange}\n          label=\"Aggregation\"\n        />\n      </div>\n      { (query.queryType || this.defaultQueryType) === MongoDBQueryType.Timeseries ? (\n        <div>\n          <div className=\"gf-form\">\n            <Switch\n              checked={query.autoTimeBound|| false}\n              onChange={this.onAutoTimeBoundChange}\n              label=\"Automatic Time-Bound\"\n            />\n            <Tooltip\n                    placement=\"top\"\n                    content=\"Add a stage at the beginning to $match documents where Timestamp Field is within the current dashboard time range\"\n                    theme={'info'}>\n              <div className=\"gf-form-help-icon gf-form-help-icon--right-normal\">\n                <Icon name=\"info-circle\" size=\"sm\" style={{ marginLeft: '10px' }} />\n              </div>\n            </Tooltip>\n          </div>\n          <div className=\"gf-form\">\n            <Switch\n              checked={query.autoTimeSort|| false}\n              onChange={this.onAutoTimeSortChange}\n              label=\"Automatic Time-Sort\"\n            />\n            <Tooltip\n                    placement=\"top\"\n                    content=\"Add a stage at the end to $sort documents ascending by Timestamp Field\"\n                    theme={'info'}>\n              <div className=\"gf-form-help-icon gf-form-help-icon--right-normal\">\n                <Icon name=\"info-circle\" size=\"sm\" style={{ marginLeft: '10px' }} />\n              </div>\n            </Tooltip>\n          </div>\n      </div>\n      ) : false }\n    </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { MongoDBVariableQuery } from './types';\n\ninterface VariableQueryProps {\n  query: MongoDBVariableQuery;\n  onChange: (query: MongoDBVariableQuery, definition: string) => void;\n}\n\nexport const VariableQueryEditor: React.FC<VariableQueryProps> = ({ onChange, query }) => {\n  const [state, setState] = useState(query);\n\n  const saveQuery = () => {\n    onChange(state, `${state.database} (${state.collection})`);\n  };\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) =>\n    setState({\n      ...state,\n      [event.currentTarget.name]: event.currentTarget.value,\n    });\n\n  return (\n    <>\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Database</span>\n        <input\n          name=\"database\"\n          className=\"gf-form-input\"\n          onBlur={saveQuery}\n          onChange={handleChange}\n          value={state.database}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Collection</span>\n        <input\n          name=\"collection\"\n          className=\"gf-form-input\"\n          onBlur={saveQuery}\n          onChange={handleChange}\n          value={state.collection}\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Aggregation</span>\n        <input\n          name=\"aggregation\"\n          className=\"gf-form-input\"\n          onBlur={saveQuery}\n          onChange={handleChange}\n          value={state.aggregation}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Field Name</span>\n        <input\n          name=\"fieldName\"\n          className=\"gf-form-input\"\n          onBlur={saveQuery}\n          onChange={handleChange}\n          value={state.fieldName}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Field Type</span>\n        <input\n          name=\"fieldType\"\n          className=\"gf-form-input\"\n          onBlur={saveQuery}\n          onChange={handleChange}\n          value={state.fieldType}\n        />\n      </div>\n\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { VariableQueryEditor } from './VariableQueryEditor';\nimport { MongoDBQuery, MongoDBDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MongoDBQuery, MongoDBDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableQueryEditor)\n  ;\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","MongoDBQueryType","defaultQuery","database","collection","queryType","Timeseries","timestampField","timestampFormat","labelFields","valueFields","valueFieldTypes","aggregation","JSON","stringify","autoTimeBound","autoTimeSort","i","DataSource","instanceSettings","query","scopedVars","templateSrv","getTemplateSrv","replace","request","updateTimeRange","range","options","target","refId","Table","fieldName","fieldType","dataQuery","targets","dataQueryRequest","lastValueFrom","this","then","rsp","error","Error","message","data","length","frameToMetricFindValue","DataSourceWithBackend","SecretFormField","LegacyForms","FormField","ConfigEditor","event","props","onOptionsChange","jsonData","url","tlsCa","tlsCertificate","tls","checked","tlsServerName","secureJsonData","username","password","tlsInsecure","tlsCertificateKey","secureJsonFields","className","label","labelWidth","inputWidth","onChange","onURLChange","placeholder","isConfigured","onReset","onResetCredential","onUsernameChange","onPasswordChange","Field","Switch","onTLSChange","onTLSInsecureChange","TextArea","onTLSCAChange","cols","onTLSServerNameChange","tooltip","onTLSCertificateChange","onTLSCertificateKeyChange","PureComponent","Input","Select","QueryEditor","description","onRunQuery","newValue","split","currentTarget","defaults","onDatabaseChange","onCollectionChange","InlineFormLabel","width","queryTypeOptions","find","onQueryTypeChange","defaultQueryType","onTimestampFieldChange","onTimestampFormatChange","join","onLabelFieldsChange","onValueFieldsChange","onValueFieldTypesChange","onAggregationChange","onAutoTimeBoundChange","Tooltip","placement","content","theme","Icon","name","size","style","marginLeft","onAutoTimeSortChange","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","setVariableQueryEditor","useState","state","setState","saveQuery","handleChange","onBlur"],"sourceRoot":""}